"use strict";!function(){$(function(){$.each($(".site__menu"),function(){new n($(this))}),$.each($(".language"),function(){new e($(this))})});var e=function(e){var n,o,s=e,i=$(".language__dropdown"),t=$(".language__item"),a=200,c=function(){t.on({click:function(e){$(this).parent().hasClass("language__active")&&e.preventDefault(),$(this).parent().hasClass("language__dropdown")&&($(".language__active .language__item").appendTo(i),$(this).appendTo(".language__active"),i.stop(!0,!0).slideUp(a))}}),s.on({mouseenter:function(){clearTimeout(o),n=setTimeout(function(){i.stop(!0,!0).slideDown(a)},200)}}),s.on({mouseleave:function(){clearTimeout(n),o=setTimeout(function(){i.is(":visible")&&i.stop(!0,!0).slideUp(a)},200)}})},l=function(){c()};l()},n=function(e){var n=this,o=e,s=$("body"),i=$(window),t=$(".site__menu-btn"),a=function(){t.on({click:function(){l($(this))}}),i.on({resize:function(){u()},scroll:function(){c()}})},c=function(){var e=i.scrollTop(),n=$(".site__hero").innerHeight();e>n?t.hasClass("active")||t.addClass("active"):t.removeClass("active")},l=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),o.removeClass("opened"),s.css({overflow:"visible"})):(n.addClass("opened"),o.addClass("opened"),s.css({overflow:"hidden"}))},u=function(){t.removeClass("opened"),o.removeAttr("style"),s.css({overflow:"visible"})},r=function(){o[0].obj=n,a()};r()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var p=this,n=40,t=$(".popup__open"),e=o,i=e.find(".popup__close, .popup__cancel"),s=e.find(".popup__wrap"),c=e.find(".popup__content"),u=$("html"),a=$(window),d=setTimeout(function(){},1),r=function(){a.height()-2*n-s.height()>0?s.css({top:(a.height()-2*n-s.height())/2}):s.css({top:0})},l=function(){var o,p=document.createElement("div");return p.className="popup__scrollbar-measure",document.body.appendChild(p),o=p.offsetWidth-p.clientWidth,document.body.removeChild(p),o},_=function(){e.css({overflowY:"hidden"}),u.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),s.hasClass("popup__wrap_top")&&s.removeClass("popup__wrap_top"),d=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},f=function(){e[0].obj=p,h()},h=function(){a.on({resize:function(){r()}}),t.on({click:function(){return m($(this).attr("data-popup")),$(this).hasClass("popup__open_top")&&s.addClass("popup__wrap_top"),!1}}),s.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return _(),!1}}),i.on({click:function(){return _(),!1}})},m=function(o){v(o),u.css({overflowY:"hidden",paddingRight:l()}),e.addClass("popup_opened"),r()},v=function(o){var p=c.filter(".popup__"+o);c.css({display:"none"}),p.css({display:"block"})};f()}}();
!function(){"use strict";$(function(){$.each($(".slides"),function(){new n($(this))})});var n=function(n){var i=this,t=n,o=$(window),s=function(){o.on({scroll:function(){a()}})},a=function(){var n=o.height();t.each(function(){var i=$(this),s=t.offset().top;o.scrollTop()>s-n/1.8&&!i.hasClass("animation")&&i.addClass("animation")})},c=function(){t[0].slides=i,s(),a()};c()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
