"use strict";!function(){$(function(){$.each($(".site__menu"),function(){new n($(this))}),$.each($(".language"),function(){new e($(this))})});var e=function(e){var n,o,i=e,s=$(".language__dropdown"),t=$(".language__item"),a=200,c=($(window),function(){t.on({click:function(e){$(this).parent().hasClass("language__active")&&(i.trigger("mouseenter"),e.preventDefault()),$(this).parent().hasClass("language__dropdown")&&($(".language__active .language__item").appendTo(s),$(this).appendTo(".language__active"),s.stop(!0,!0).slideUp(a))}}),i.on({mouseenter:function(){clearTimeout(o),n=setTimeout(function(){s.stop(!0,!0).slideDown(a)},200)}}),i.on({mouseleave:function(){clearTimeout(n),o=setTimeout(function(){s.is(":visible")&&s.stop(!0,!0).slideUp(a)},200)}})}),u=function(){c()};u()},n=function(e){var n=this,o=e,i=$("body"),s=$(window),t=$(".site__menu-btn"),a=function(){t.on({click:function(){u($(this))}}),s.on({resize:function(){l()},scroll:function(){c()}})},c=function(){var e=s.scrollTop(),n=$(".site__hero").innerHeight();e>n?t.hasClass("active")||t.addClass("active"):t.removeClass("active")},u=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),o.removeClass("opened"),i.css({overflow:"visible"})):(n.addClass("opened"),o.addClass("opened"),i.css({overflow:"hidden"}))},l=function(){t.removeClass("opened"),o.removeAttr("style"),i.css({overflow:"visible"})},r=function(){o[0].obj=n,a()};r()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,e=40,t=$(".popup__open"),i=o,p=i.find(".popup__close, .popup__cancel"),c=i.find(".popup__wrap"),u=i.find(".popup__content"),s=$("html"),a=$(window),d=$(".popup__video"),r=setTimeout(function(){},1),f=function(){a.height()-2*e-c.height()>0?c.css({top:(a.height()-2*e-c.height())/2}):c.css({top:0})},l=function(o){d.append('<iframe src="'+o+'?autoplay=1" frameborder="0" allowfullscreen></iframe>')},h=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},_=function(){i.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),i.removeClass("popup_opened"),i.addClass("popup_hide"),r=setTimeout(function(){i.css({overflowY:"auto"}),i.removeClass("popup_hide")},300),u.hasClass("popup__video")&&d.find("iframe").remove()},m=function(){i[0].obj=n,v()},v=function(){a.on({resize:function(){f()}}),t.on({click:function(){return g($(this).attr("data-popup")),"video"==$(this).attr("data-popup")&&l($(this).attr("data-video")),!1}}),u.on({click:function(o){o.stopPropagation()}}),i.on({click:function(){return _(),!1}}),p.on({click:function(){return _(),!1}})},g=function(o){w(o),console.log(o),s.css({overflowY:"hidden",paddingRight:h()}),i.addClass("popup_opened"),f()},w=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};m()}}();
!function(){"use strict";$(function(){$.each($(".slides"),function(){new n($(this))})});var n=function(n){var i=this,t=n,o=$(window),s=function(){o.on({scroll:function(){a()}})},a=function(){var n=o.height();t.each(function(){var i=$(this),s=t.offset().top;o.scrollTop()>s-n/1.3&&!i.hasClass("animation")&&i.addClass("animation")})},c=function(){t[0].slides=i,s(),a()};c()}}();
!function(){"use strict";$(function(){$.each($(".contact__map"),function(){new n($(this))})});var n=function(n){this.obj=n,this.mapWrap=this.obj;var o,t=this,e=[],a=null,i=function(){c(),l()},s=function(){var n={zoom:a.zoom,scrollwheel:!1};o=new google.maps.Map(t.mapWrap[0],n),g(o)},c=function(){$.getJSON("json/contact-map.json",{},function(n){a=n,google.maps.event.addDomListener(window,"load",s)})},l=function(){},g=function(n){for(var o=0;o<a.places.length;o++)m(o,n)},m=function(n,t){setTimeout(function(){var i=a.places[n],s=new google.maps.LatLng(i.lat,i.lng),c=new google.maps.LatLngBounds;e[n]=new google.maps.Marker({position:s,map:t,clickable:!1,icon:{url:i.icon,scaledSize:new google.maps.Size(i.size[0],i.size[1])},animation:google.maps.Animation.DROP});for(var l=0;l<e.length;l++)""!==e[l]&&c.extend(e[l].getPosition());o.fitBounds(c)},300*n)};i()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
