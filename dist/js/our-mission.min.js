"use strict";!function(){$(function(){$.each($(".site__menu"),function(){new n($(this))}),$.each($(".language"),function(){new e($(this))})});var e=function(e){var n,o,s=e,i=$(".language__dropdown"),t=$(".language__item"),a=200,c=function(){t.on({click:function(e){$(this).parent().hasClass("language__active")&&e.preventDefault(),$(this).parent().hasClass("language__dropdown")&&($(".language__active .language__item").appendTo(i),$(this).appendTo(".language__active"),i.stop(!0,!0).slideUp(a))}}),s.on({mouseenter:function(){clearTimeout(o),n=setTimeout(function(){i.stop(!0,!0).slideDown(a)},200)}}),s.on({mouseleave:function(){clearTimeout(n),o=setTimeout(function(){i.is(":visible")&&i.stop(!0,!0).slideUp(a)},200)}})},l=function(){c()};l()},n=function(e){var n=this,o=e,s=$("body"),i=$(window),t=$(".site__menu-btn"),a=function(){t.on({click:function(){l($(this))}}),i.on({resize:function(){u()},scroll:function(){c()}})},c=function(){var e=i.scrollTop(),n=$(".site__hero").innerHeight();e>n?t.hasClass("active")||t.addClass("active"):t.removeClass("active")},l=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),o.removeClass("opened"),s.css({overflow:"visible"})):(n.addClass("opened"),o.addClass("opened"),s.css({overflow:"hidden"}))},u=function(){t.removeClass("opened"),o.removeAttr("style"),s.css({overflow:"visible"})},r=function(){o[0].obj=n,a()};r()}}();
!function(){"use strict";$(function(){$.each($(".slides"),function(){new s($(this))})});var s=function(s){var n=this,a=s,e=$(window),t=function(){e.on({scroll:function(){i()}})},i=function(){var s=e.height();a.each(function(){var n=$(this),t=a.offset().top;e.scrollTop()>t-s/1.8&&!n.hasClass("animation")&&(n.parent(".method__list").length?o(n):n.addClass("animation"))})},o=function(s){var n=s;n.hasClass("active")||(n.prev().removeClass("active"),n.prev().addClass("prev"),n.next().removeClass("active"),n.next().removeClass("prev"),n.removeClass("prev"),n.addClass("active"))},c=function(){a[0].slides=n,t(),i()};c()}}();
!function(){"use strict";$(function(){$(".scroll-top-btn").each(function(){new o($(this))})});var o=function(o){var n=o,t=($(".site__hero"),$(".site__header ")),c=$("html,body"),i=$(window),l=function(){n.on({click:function(){i.scrollToTop()}}),i.on({scroll:function(){r()}})},r=function(){var o=t.innerHeight();i.scrollTop()>o?n.addClass("active"):n.removeClass("active")},e=function(){r(),l()};i.scrollToTop=function(){var o=0;c.animate({scrollTop:o},{duration:500})},e()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
